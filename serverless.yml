service: poolingApplicationAPI

frameworkVersion: "3"

plugins:
  - serverless-offline
  - serverless-dotenv-plugin  
  
useDotenv: true

provider:
  name: aws
  runtime: python3.11
  iam: 
    role: ${env:IAM_ROLE_ARN}
  layers:
    - ${env:LAYER_ARN}

resources:
  Resources:
    S3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: pooling-application-bucket
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders:
                - "*"
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              AllowedOrigins:
                - "*"
              ExposedHeaders:
                - ETag
              MaxAge: 3000
        NotificationConfiguration:
          QueueConfigurations:
            - Event: "s3:ObjectCreated:CompleteMultipartUpload"
              Queue: ${env:SQS_QUEUE_ARN}

    DynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: pooling-database
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

package:
  individually: false
  exclude:
    - node_modules/**
    - .vscode/**
    - .env
    - .gitignore
    - env/**
    - src/frontend/**

  include:
    - src/

functions:
  createStatus:
    handler: src/backend/apis/create_status/handler.lambda_handler
    events:
      - http:
          path: /createstatus
          method: post
          cors:
            origin: '*' 
            headers: 
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
  
  getResultPooling:
    handler: src/backend/apis/get_pooling_result/handler.lambda_handler
    events:
      - http:
          path: /getpoolingresult/{id}
          method: get
          cors:
            origin: '*' 
            headers: 
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
            
  consumer:
    handler: src/backend/event_driven/consumer/handler.lambda_handler
    events:
      - sqs: ${env:SQS_QUEUE_ARN}
    timeout: 300 
